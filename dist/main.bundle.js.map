{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ts_project/./src/index.ts"],"sourcesContent":["import \"./style/style.css\";\n\nlet cadran = document.getElementById(\"cadran\") as HTMLInputElement; // Valeur affichÃ©e sur le cadran\nconst allButton = document.querySelectorAll(\"button\");\nconst equal = document.getElementById(\"equal\");\n\n// Factorial Logic\nfunction factorial(n: number): number {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// Sign changing logic\nfunction changeSign(str: string): void {\n  if (cadran.value.length > 0 && !cadran.value.startsWith(\"-\")) {\n    if (parseFloat(cadran.value) >= 0) {\n      cadran.value = \"-\" + cadran.value;\n      document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n    }\n  } else if (cadran.value.length === 0) {\n    cadran.value = \"-\";\n    document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n  } else {\n    let tmp: string = cadran.value.replace(\"-\", \"\");\n    cadran.value = tmp;\n    document.getElementById(\"cadran\").classList.remove(\"text-red-500\");\n    document.getElementById(\"cadran\").classList.add(\"text-blue-500\");\n  }\n}\n\ninterface Value {\n  current: string;\n  second: string;\n  result: string;\n}\n\ninterface Operations {\n  [key: string]: boolean;\n  plus: boolean;\n  minus: boolean;\n  divide: boolean;\n  multiply: boolean;\n  interuptor: boolean;\n}\n\nconst fieldValue: Value = {\n  current: \"\",\n  second: \"\",\n  result: \"\",\n};\n\nconst operations: Operations = {\n  plus: false,\n  minus: false,\n  divide: false,\n  multiply: false,\n  interuptor: false,\n};\n\n// Click event logic\nconst getValue = () => {\n  allButton.forEach((element: HTMLElement) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault;\n\n      if (element.id === \"equal\") {\n        operations.interuptor = false; // Out of Equal Loop\n      }\n\n      switch (element.id) {\n        // Numbers Buttons\n        case \"point\":\n          if (cadran.value.includes(\".\")) {\n            return;\n          } else {\n            if (cadran.value.length === 0) {\n              cadran.value += \"0.\";\n            } else if (cadran.value.length > 0) {\n              cadran.value += \".\";\n            }\n          }\n          break;\n        case \"random\": // random number between 1 and 9\n          let randomNumber: number = Math.floor(Math.random() * 10);\n          cadran.value = cadran.value + randomNumber.toString();\n          break;\n        case \"zero\":\n          cadran.value += \"0\";\n          break;\n        case \"one\":\n          cadran.value += \"1\";\n          break;\n        case \"two\":\n          cadran.value += \"2\";\n          break;\n        case \"three\":\n          cadran.value += \"3\";\n          break;\n        case \"four\":\n          cadran.value += \"4\";\n          break;\n        case \"five\":\n          cadran.value += \"5\";\n          break;\n        case \"six\":\n          cadran.value += \"6\";\n          break;\n        case \"seven\":\n          cadran.value += \"7\";\n          break;\n        case \"eight\":\n          cadran.value += \"8\";\n          break;\n        case \"nine\":\n          cadran.value += \"9\";\n          break;\n\n        // Operation buttons\n        case \"square\":\n          const baseSquare: number = parseFloat(cadran.value);\n          const square: number = Math.pow(baseSquare, 2);\n          cadran.value = square.toString();\n          break;\n        case \"cube\":\n          const baseCube: number = parseFloat(cadran.value);\n          const cube: number = Math.pow(baseCube, 3);\n          cadran.value = cube.toString();\n          break;\n        case \"factorial\":\n          const baseFactorial: number = parseFloat(cadran.value);\n          const value: number = factorial(baseFactorial);\n          const stringValue: string = value.toString();\n          cadran.value = stringValue;\n          break;\n        case \"cubeRoot\":\n          const baseCubeRoot: number = parseFloat(cadran.value);\n          const cubeRoot: number = Math.cbrt(baseCubeRoot);\n          cadran.value = cubeRoot.toString();\n          break;\n        case \"squareRoot\":\n          const baseSquareRoot: number = parseFloat(cadran.value);\n          const squareRoot: number = Math.sqrt(baseSquareRoot);\n          cadran.value = squareRoot.toString();\n          break;\n        case \"changeSign\":\n          changeSign(cadran.value);\n          break;\n        case \"reset\":\n          cadran.value = \"\";\n          break;\n        case \"percent\":\n          const basePercent: number = parseFloat(cadran.value);\n          const percent: number = basePercent / 100;\n          cadran.value = percent.toString();\n          break;\n        case \"divide\":\n          if (!cadran.value.length) {\n            return;\n          }\n          fieldValue.current = cadran.value;\n          cadran.value = \"\";\n          operations.divide = true;\n          for (const key in operations) {\n            if (key !== \"divide\") {\n              operations[key] = false;\n            }\n          }\n          break;\n        case \"multiply\":\n          if (!cadran.value.length) {\n            return;\n          }\n          fieldValue.current = cadran.value;\n          cadran.value = \"\";\n          operations.multiply = true;\n          for (const key in operations) {\n            if (key !== \"multiply\") {\n              operations[key] = false;\n            }\n          }\n          break;\n        case \"minus\":\n          if (!cadran.value.length) {\n            return;\n          }\n          fieldValue.current = cadran.value;\n          cadran.value = \"\";\n          operations.minus = true;\n          for (const key in operations) {\n            if (key !== \"minus\") {\n              operations[key] = false;\n            }\n          }\n          break;\n        case \"plus\":\n          if (!cadran.value.length) {\n            return;\n          }\n          fieldValue.current = cadran.value;\n          cadran.value = \"\";\n          operations.plus = true;\n          for (const key in operations) {\n            if (key !== \"plus\") {\n              operations[key] = false;\n            }\n          }\n          break;\n      }\n    });\n  });\n};\n\n// Equal logic for (divide, multiply, addition, minus)\nconst equalClick = () => {\n  equal.addEventListener(\"click\", (event) => {\n    event.preventDefault;\n\n    operations.interuptor = true;\n\n    if (!operations.interuptor) {\n      for (const key in operations) {\n        if (key !== \"interuptor\") {\n          operations[key] = false;\n        }\n      }\n    }\n\n    // Check if existing value\n    if (fieldValue.current.length > 0) {\n      fieldValue.second = cadran.value;\n\n      // Divide logic\n      if (operations.divide === true) {\n        if (parseFloat(fieldValue.second) !== 0) {\n          cadran.value = (\n            parseFloat(fieldValue.current) / parseFloat(fieldValue.second)\n          ).toString();\n        } else {\n          cadran.value = \"Error\";\n        }\n\n        // Multiply logic\n      } else if (operations.multiply === true) {\n        if (parseFloat(fieldValue.second) !== 0) {\n          cadran.value = (\n            parseFloat(fieldValue.current) * parseFloat(fieldValue.second)\n          ).toString();\n        } else {\n          cadran.value = \"Error\";\n        }\n      }\n\n      // Plus logic\n      else if (operations.plus === true) {\n        if (parseFloat(fieldValue.second) !== 0) {\n          cadran.value = (\n            parseFloat(fieldValue.current) + parseFloat(fieldValue.second)\n          ).toString();\n        } else {\n          cadran.value = \"Error\";\n        }\n\n        // Minus logic\n      } else if (operations.minus === true) {\n        if (parseFloat(fieldValue.second) !== 0) {\n          cadran.value = (\n            parseFloat(fieldValue.current) - parseFloat(fieldValue.second)\n          ).toString();\n        } else {\n          cadran.value = \"Error\";\n        }\n      }\n    }\n  });\n};\n\ngetValue();\nequalClick();\n"],"names":["cadran","document","getElementById","allButton","querySelectorAll","equal","factorial","n","fieldValue","current","second","result","operations","plus","minus","divide","multiply","interuptor","forEach","element","addEventListener","event","preventDefault","id","value","includes","length","randomNumber","Math","floor","random","toString","baseSquare","parseFloat","square","pow","baseCube","cube","stringValue","baseCubeRoot","cubeRoot","cbrt","baseSquareRoot","squareRoot","sqrt","str","startsWith","classList","add","tmp","replace","remove","changeSign","percent","key"],"sourceRoot":""}