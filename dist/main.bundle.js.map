{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ts_project/./src/utils/types/interfaces.ts","webpack://ts_project/./src/utils/algebra/algebra.ts","webpack://ts_project/./src/Handlers/eventHandlers.ts","webpack://ts_project/./src/Handlers/themeHandlers.ts","webpack://ts_project/./src/utils/value/value.ts","webpack://ts_project/./src/utils/result/result.ts"],"sourcesContent":["export interface Value {\n  current: string;\n  second: string;\n  result: string;\n}\n\nexport interface Operations {\n  [key: string]: boolean;\n  plus: boolean;\n  minus: boolean;\n  divide: boolean;\n  multiply: boolean;\n  interuptor: boolean;\n}\n\nexport const fieldValue: Value = {\n  current: \"\",\n  second: \"\",\n  result: \"\",\n};\n\nexport const operations: Operations = {\n  plus: false,\n  minus: false,\n  divide: false,\n  multiply: false,\n  interuptor: false,\n};\n","import { fieldValue, operations } from \"../types/interfaces\";\n\n// Factorial Logic\nexport function factorial(cadran: HTMLInputElement): void {\n  const baseFactorial: number = parseFloat(cadran.value);\n\n  function factorialNumber(n: number): number {\n    if (n === 0) {\n      return 1;\n    } else {\n      return n * factorialNumber(n - 1);\n    }\n  }\n\n  const result: number = factorialNumber(baseFactorial); // Appeler la fonction ici\n  const stringValue: string = result.toString();\n  cadran.value = stringValue;\n}\n\nexport function baseSquare(cadran: HTMLInputElement): void {\n  const baseSquare: number = parseFloat(cadran.value);\n  const square: number = Math.pow(baseSquare, 2);\n  cadran.value = square.toString();\n}\n\nexport function baseCube(cadran: HTMLInputElement): void {\n  const baseCube: number = parseFloat(cadran.value);\n  const cube: number = Math.pow(baseCube, 3);\n  cadran.value = cube.toString();\n}\n\nexport function baseCubeRoot(cadran: HTMLInputElement): void {\n  const baseCubeRoot: number = parseFloat(cadran.value);\n  const cubeRoot: number = Math.cbrt(baseCubeRoot);\n  cadran.value = cubeRoot.toString();\n}\n\nexport function squareRoot(cadran: HTMLInputElement): void {\n  const baseSquareRoot: number = parseFloat(cadran.value);\n  const squareRoot: number = Math.sqrt(baseSquareRoot);\n  cadran.value = squareRoot.toString();\n}\n\nexport function percent(cadran: HTMLInputElement): void {\n  const basePercent: number = parseFloat(cadran.value);\n  const percent: number = basePercent / 100;\n  cadran.value = percent.toString();\n}\n\nfunction prepareOperation(\n  cadran: HTMLInputElement,\n  operation: keyof typeof operations,\n): void {\n  if (!cadran.value.length) return;\n\n  fieldValue.current = cadran.value;\n  cadran.value = \"\";\n\n  for (const key in operations) {\n    operations[key] = false;\n  }\n  operations[operation] = true;\n}\n\nexport function divide(cadran: HTMLInputElement): void {\n  prepareOperation(cadran, \"divide\");\n}\n\nexport function multiply(cadran: HTMLInputElement): void {\n  prepareOperation(cadran, \"multiply\");\n}\n\nexport function minus(cadran: HTMLInputElement): void {\n  prepareOperation(cadran, \"minus\");\n}\n\nexport function plus(cadran: HTMLInputElement): void {\n  prepareOperation(cadran, \"plus\");\n}\n","import * as Algebra from \"../utils/algebra/algebra\";\nimport * as Value from \"../utils/value/value\";\nimport * as Result from \"../utils/result/result\";\nimport { fieldValue, operations } from \"../utils/types/interfaces\";\n\nlet cadran = document.getElementById(\"cadran\") as HTMLInputElement;\n\nconst valuesButton = document.querySelectorAll(\".values\");\nconst operationsButton = document.querySelectorAll(\".operations\");\nconst equal = document.getElementById(\"equal\");\n\n// Add comma to value for each group of three numbers\nexport const commaValue = () => {\n  let cadranValue = cadran.value.replace(/,/g, \"\"); // Delete existing comma before couting\n  let formattedValue = cadranValue.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); // Regex to add comma every three numbers\n  cadran.value = formattedValue;\n};\n\n// Input logic\nexport const showValue = () => {\n  cadran.addEventListener(\"input\", (event) => {\n    event.preventDefault();\n\n    commaValue();\n  });\n};\n\n// Click event logic\nexport const getValues = () => {\n  valuesButton.forEach((element: HTMLElement) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n\n      if (element.id === \"equal\") {\n        operations.interuptor = false; // Out of Equal Loop\n      }\n\n      switch (element.id) {\n        case \"point\":\n          Value.point(cadran);\n          break;\n        case \"random\":\n          Value.randomValue(cadran);\n          break;\n        case \"changeSign\":\n          Value.changeSign(cadran);\n          break;\n        case \"reset\":\n          cadran.value = \"\";\n          break;\n        case \"zero\":\n          cadran.value += \"0\";\n          break;\n        case \"one\":\n          cadran.value += \"1\";\n          break;\n        case \"two\":\n          cadran.value += \"2\";\n          break;\n        case \"three\":\n          cadran.value += \"3\";\n          break;\n        case \"four\":\n          cadran.value += \"4\";\n          break;\n        case \"five\":\n          cadran.value += \"5\";\n          break;\n        case \"six\":\n          cadran.value += \"6\";\n          break;\n        case \"seven\":\n          cadran.value += \"7\";\n          break;\n        case \"eight\":\n          cadran.value += \"8\";\n          break;\n        case \"nine\":\n          cadran.value += \"9\";\n          break;\n      }\n\n      commaValue();\n    });\n  });\n};\n\n// Click event logic\nexport const makeOperations = () => {\n  operationsButton.forEach((element: HTMLElement) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n\n      if (element.id === \"equal\") {\n        operations.interuptor = false; // Out of Equal Loop\n      }\n\n      // Algebric operation buttons\n      switch (element.id) {\n        case \"square\":\n          Algebra.baseSquare(cadran);\n          break;\n        case \"cube\":\n          Algebra.baseCube(cadran);\n          break;\n        case \"factorial\":\n          Algebra.factorial(cadran);\n          break;\n        case \"cubeRoot\":\n          Algebra.baseCubeRoot(cadran);\n          break;\n        case \"squareRoot\":\n          Algebra.squareRoot(cadran);\n          break;\n        case \"percent\":\n          Algebra.percent(cadran);\n          break;\n        case \"divide\":\n          Algebra.divide(cadran);\n          break;\n        case \"multiply\":\n          Algebra.multiply(cadran);\n          break;\n        case \"minus\":\n          Algebra.minus(cadran);\n          break;\n        case \"plus\":\n          Algebra.plus(cadran);\n          break;\n      }\n\n      // Add comma to value\n      commaValue();\n    });\n  });\n};\n\n// Equal logic for (divide, multiply, addition, minus)\nexport const equalClick = () => {\n  equal.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    operations.interuptor = true;\n\n    if (!operations.interuptor) {\n      for (const key in operations) {\n        if (key !== \"interuptor\") {\n          operations[key] = false;\n        }\n      }\n    }\n\n    // Check if existing value\n    if (fieldValue.current.length > 0) {\n      fieldValue.second = cadran.value;\n\n      Result.operation(cadran);\n    }\n    commaValue();\n  });\n};\n","export const changeTheme = (): void => {\n  const themeInput = document.getElementById(\"theme\") as HTMLInputElement;\n\n  themeInput.addEventListener(\"input\", () => {\n    const value = themeInput.value;\n    applyTheme(value);\n  });\n};\n\nconst applyTheme = (themeValue: string): void => {\n  const root = document.documentElement;\n\n  switch (themeValue) {\n    case \"1\":\n      root.classList.add(\"theme-1\");\n      root.classList.remove(\"theme-2\", \"theme-3\");\n      break;\n    case \"2\":\n      root.classList.add(\"theme-2\");\n      root.classList.remove(\"theme-1\", \"theme-3\");\n      break;\n    case \"3\":\n      root.classList.add(\"theme-3\");\n      root.classList.remove(\"theme-1\", \"theme-2\");\n      break;\n  }\n};\n","// tester la fonction\nexport function changeSign(cadran: HTMLInputElement): void {\n  if (cadran.value.length > 0 && !cadran.value.startsWith(\"-\")) {\n    if (parseFloat(cadran.value) >= 0) {\n      cadran.value = \"-\" + cadran.value;\n      document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n    }\n  } else if (cadran.value.length === 0) {\n    cadran.value = \"-\";\n    document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n  } else {\n    let tmp: string = cadran.value.replace(\"-\", \"\");\n    cadran.value = tmp;\n    document.getElementById(\"cadran\").classList.remove(\"text-red-500\");\n    document.getElementById(\"cadran\").classList.add(\"text-blue-500\");\n  }\n}\n\nexport function point(cadran: HTMLInputElement): void {\n  if (cadran.value.includes(\".\")) {\n    return;\n  } else {\n    if (cadran.value.length === 0) {\n      cadran.value += \"0.\";\n    } else if (cadran.value.length > 0) {\n      cadran.value += \".\";\n    }\n  }\n}\n\nexport function randomValue(cadran: HTMLInputElement): void {\n  let randomNumber: number = Math.floor(Math.random() * 10);\n  cadran.value = cadran.value + randomNumber.toString();\n}\n","import { fieldValue, operations } from \"../types/interfaces\";\n\n// Tester result\nexport function operation(cadran: HTMLInputElement): void {\n  const firstNumber = parseFloat(fieldValue.current);\n  const secondNumber = parseFloat(fieldValue.second);\n  let result: number | string;\n\n  if (secondNumber === 0) {\n    cadran.value = \"Error\";\n    return;\n  }\n\n  if (operations.divide) {\n    result = firstNumber / secondNumber;\n  } else if (operations.multiply) {\n    result = firstNumber * secondNumber;\n  } else if (operations.plus) {\n    result = firstNumber + secondNumber;\n  } else if (operations.minus) {\n    result = firstNumber - secondNumber;\n  } else {\n    result = \"No operation selected\";\n  }\n\n  cadran.value = result.toString();\n}\n"],"names":["fieldValue","current","second","result","operations","plus","minus","divide","multiply","interuptor","prepareOperation","cadran","operation","value","length","key","themeInput","document","getElementById","valuesButton","querySelectorAll","operationsButton","equal","commaValue","formattedValue","replace","forEach","element","addEventListener","event","preventDefault","id","includes","randomNumber","Math","floor","random","toString","startsWith","parseFloat","classList","add","tmp","remove","baseSquare","square","pow","baseCube","cube","stringValue","factorialNumber","n","baseCubeRoot","cubeRoot","cbrt","baseSquareRoot","squareRoot","sqrt","percent","firstNumber","secondNumber","themeValue","root","documentElement","applyTheme"],"sourceRoot":""}