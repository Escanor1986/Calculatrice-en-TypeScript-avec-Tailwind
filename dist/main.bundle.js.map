{"version":3,"file":"main.bundle.js","mappings":"mBAeO,IAAMA,EAAoB,CAC/BC,QAAS,GACTC,OAAQ,GACRC,OAAQ,IAGGC,EAAyB,CACpCC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,YAAY,GCrBVC,EAASC,SAASC,eAAe,UAE/BC,EAAeF,SAASG,iBAAiB,WACzCC,EAAmBJ,SAASG,iBAAiB,eAC7CE,EAAQL,SAASC,eAAe,SAIpCC,EAAaI,SAAQ,SAACC,GACpBA,EAAQC,iBAAiB,SAAS,SAACC,GAOjC,OANAA,EAAMC,eAEa,UAAfH,EAAQI,KACVlB,EAAWK,YAAa,GAGlBS,EAAQI,IACd,IAAK,SCLN,SAAeZ,GAChBA,EAAOa,MAAMC,SAAS,OAGI,IAAxBd,EAAOa,MAAME,OACff,EAAOa,OAAS,KACPb,EAAOa,MAAME,OAAS,IAC/Bf,EAAOa,OAAS,KAGtB,CDJU,CAAYb,GACZ,MACF,IAAK,UCIN,SAAqBA,GAC1B,IAAIgB,EAAuBC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3CnB,EAAOa,MAAQb,EAAOa,MAAQG,EAAaI,UAC7C,CDNU,CAAkBpB,GAClB,MACF,IAAK,cC5BN,SAAoBA,GACzB,GAAIA,EAAOa,MAAME,OAAS,IAAMf,EAAOa,MAAMQ,WAAW,KAClDC,WAAWtB,EAAOa,QAAU,IAC9Bb,EAAOa,MAAQ,IAAMb,EAAOa,MAC5BZ,SAASC,eAAe,UAAUqB,UAAUC,IAAI,sBAE7C,GAA4B,IAAxBxB,EAAOa,MAAME,OACtBf,EAAOa,MAAQ,IACfZ,SAASC,eAAe,UAAUqB,UAAUC,IAAI,oBAC3C,CACL,IAAIC,EAAczB,EAAOa,MAAMa,QAAQ,IAAK,IAC5C1B,EAAOa,MAAQY,EACfxB,SAASC,eAAe,UAAUqB,UAAUI,OAAO,gBACnD1B,SAASC,eAAe,UAAUqB,UAAUC,IAAI,gB,CAEpD,CDcU,CAAiBxB,GACjB,MACF,IAAK,QACHA,EAAOa,MAAQ,GACf,MACF,IAAK,OACHb,EAAOa,OAAS,IAChB,MACF,IAAK,MACHb,EAAOa,OAAS,IAChB,MACF,IAAK,MACHb,EAAOa,OAAS,IAChB,MACF,IAAK,QACHb,EAAOa,OAAS,IAChB,MACF,IAAK,OACHb,EAAOa,OAAS,IAChB,MACF,IAAK,OACHb,EAAOa,OAAS,IAChB,MACF,IAAK,MACHb,EAAOa,OAAS,IAChB,MACF,IAAK,QACHb,EAAOa,OAAS,IAChB,MACF,IAAK,QACHb,EAAOa,OAAS,IAChB,MACF,IAAK,OACHb,EAAOa,OAAS,IAGtB,GACF,IAKAR,EAAiBE,SAAQ,SAACC,GACxBA,EAAQC,iBAAiB,SAAS,SAACC,GAQjC,OAPAA,EAAMC,eAEa,UAAfH,EAAQI,KACVlB,EAAWK,YAAa,GAIlBS,EAAQI,IACd,IAAK,UE9DN,SAAoBZ,GACzB,IAAM4B,EAAqBN,WAAWtB,EAAOa,OACvCgB,EAAiBZ,KAAKa,IAAIF,EAAY,GAC5C5B,EAAOa,MAAQgB,EAAOT,UACxB,CF2DU,CAAmBpB,GACnB,MACF,IAAK,QE3DN,SAAkBA,GACvB,IAAM+B,EAAmBT,WAAWtB,EAAOa,OACrCmB,EAAef,KAAKa,IAAIC,EAAU,GACxC/B,EAAOa,MAAQmB,EAAKZ,UACtB,CFwDU,CAAiBpB,GACjB,MACF,IAAK,aEpFN,SAAmBA,GAWxB,IACMiC,EATN,SAASC,EAAgBC,GACvB,OAAU,IAANA,EACK,EAEAA,EAAID,EAAgBC,EAAI,EAEnC,CAEuBD,CAVOZ,WAAWtB,EAAOa,QAWbO,WACnCpB,EAAOa,MAAQoB,CACjB,CFuEU,CAAkBjC,GAClB,MACF,IAAK,YE3DN,SAAsBA,GAC3B,IAAMoC,EAAuBd,WAAWtB,EAAOa,OACzCwB,EAAmBpB,KAAKqB,KAAKF,GACnCpC,EAAOa,MAAQwB,EAASjB,UAC1B,CFwDU,CAAqBpB,GACrB,MACF,IAAK,cExDN,SAAoBA,GACzB,IAAMuC,EAAyBjB,WAAWtB,EAAOa,OAC3C2B,EAAqBvB,KAAKwB,KAAKF,GACrCvC,EAAOa,MAAQ2B,EAAWpB,UAC5B,CFqDU,CAAmBpB,GACnB,MACF,IAAK,WErDN,SAAiBA,GACtB,IACM0C,EADsBpB,WAAWtB,EAAOa,OACR,IACtCb,EAAOa,MAAQ6B,EAAQtB,UACzB,CFkDU,CAAgBpB,GAChB,MACF,IAAK,UElDN,SAAgBA,GACrB,GAAKA,EAAOa,MAAME,OAMlB,IAAK,IAAM4B,KAHXrD,EAAWC,QAAUS,EAAOa,MAC5Bb,EAAOa,MAAQ,GACfnB,EAAWG,QAAS,EACFH,EACJ,WAARiD,IACFjD,EAAWiD,IAAO,EAGxB,CFuCU,CAAe3C,GACf,MACF,IAAK,YEvCN,SAAkBA,GACvB,GAAKA,EAAOa,MAAME,OAMlB,IAAK,IAAM4B,KAHXrD,EAAWC,QAAUS,EAAOa,MAC5Bb,EAAOa,MAAQ,GACfnB,EAAWI,UAAW,EACJJ,EACJ,aAARiD,IACFjD,EAAWiD,IAAO,EAGxB,CF4BU,CAAiB3C,GACjB,MACF,IAAK,SE5BN,SAAeA,GACpB,GAAKA,EAAOa,MAAME,OAMlB,IAAK,IAAM4B,KAHXrD,EAAWC,QAAUS,EAAOa,MAC5Bb,EAAOa,MAAQ,GACfnB,EAAWE,OAAQ,EACDF,EACJ,UAARiD,IACFjD,EAAWiD,IAAO,EAGxB,CFiBU,CAAc3C,GACd,MACF,IAAK,QEjBN,SAAcA,GACnB,GAAKA,EAAOa,MAAME,OAMlB,IAAK,IAAM4B,KAHXrD,EAAWC,QAAUS,EAAOa,MAC5Bb,EAAOa,MAAQ,GACfnB,EAAWC,MAAO,EACAD,EACJ,SAARiD,IACFjD,EAAWiD,IAAO,EAGxB,CFMU,CAAa3C,GAGnB,GACF,IAKAM,EAAMG,iBAAiB,SAAS,SAACC,GAK/B,GAJAA,EAAMC,eAENjB,EAAWK,YAAa,GAEnBL,EAAWK,WACd,IAAK,IAAM4C,KAAOjD,EACJ,eAARiD,IACFjD,EAAWiD,IAAO,GAMpBrD,EAAWC,QAAQwB,OAAS,IAC9BzB,EAAWE,OAASQ,EAAOa,MGnI1B,SAAmBb,IAEE,IAAtBN,EAAWG,OACyB,IAAlCyB,WAAWhC,EAAWE,QACxBQ,EAAOa,OACLS,WAAWhC,EAAWC,SAAW+B,WAAWhC,EAAWE,SACvD4B,WAEFpB,EAAOa,MAAQ,SAIgB,IAAxBnB,EAAWI,SACkB,IAAlCwB,WAAWhC,EAAWE,QACxBQ,EAAOa,OACLS,WAAWhC,EAAWC,SAAW+B,WAAWhC,EAAWE,SACvD4B,WAEFpB,EAAOa,MAAQ,SAKU,IAApBnB,EAAWC,KACoB,IAAlC2B,WAAWhC,EAAWE,QACxBQ,EAAOa,OACLS,WAAWhC,EAAWC,SAAW+B,WAAWhC,EAAWE,SACvD4B,WAEFpB,EAAOa,MAAQ,SAIa,IAArBnB,EAAWE,QACkB,IAAlC0B,WAAWhC,EAAWE,QACxBQ,EAAOa,OACLS,WAAWhC,EAAWC,SAAW+B,WAAWhC,EAAWE,SACvD4B,WAEFpB,EAAOa,MAAQ,QAGrB,CH2FM,CAAiBb,GAErB,G","sources":["webpack://ts_project/./src/types/interfaces.ts","webpack://ts_project/./src/controllers/eventHandlers.ts","webpack://ts_project/./src/types/value.ts","webpack://ts_project/./src/types/algebra.ts","webpack://ts_project/./src/types/result.ts"],"sourcesContent":["export interface Value {\n  current: string;\n  second: string;\n  result: string;\n}\n\nexport interface Operations {\n  [key: string]: boolean;\n  plus: boolean;\n  minus: boolean;\n  divide: boolean;\n  multiply: boolean;\n  interuptor: boolean;\n}\n\nexport const fieldValue: Value = {\n  current: \"\",\n  second: \"\",\n  result: \"\",\n};\n\nexport const operations: Operations = {\n  plus: false,\n  minus: false,\n  divide: false,\n  multiply: false,\n  interuptor: false,\n};\n","import * as Algebra from \"../types/algebra\";\nimport * as Value from \"../types/value\";\nimport * as Result from \"../types/result\";\nimport { fieldValue, operations } from \"../types/interfaces\";\n\nlet cadran = document.getElementById(\"cadran\") as HTMLInputElement;\n\nconst valuesButton = document.querySelectorAll(\".values\");\nconst operationsButton = document.querySelectorAll(\".operations\");\nconst equal = document.getElementById(\"equal\");\n\n// Click event logic\nexport const getValues = () => {\n  valuesButton.forEach((element: HTMLElement) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault;\n\n      if (element.id === \"equal\") {\n        operations.interuptor = false; // Out of Equal Loop\n      }\n\n      switch (element.id) {\n        case \"point\":\n          Value.point(cadran);\n          break;\n        case \"random\":\n          Value.randomValue(cadran);\n          break;\n        case \"changeSign\":\n          Value.changeSign(cadran);\n          break;\n        case \"reset\":\n          cadran.value = \"\";\n          break;\n        case \"zero\":\n          cadran.value += \"0\";\n          break;\n        case \"one\":\n          cadran.value += \"1\";\n          break;\n        case \"two\":\n          cadran.value += \"2\";\n          break;\n        case \"three\":\n          cadran.value += \"3\";\n          break;\n        case \"four\":\n          cadran.value += \"4\";\n          break;\n        case \"five\":\n          cadran.value += \"5\";\n          break;\n        case \"six\":\n          cadran.value += \"6\";\n          break;\n        case \"seven\":\n          cadran.value += \"7\";\n          break;\n        case \"eight\":\n          cadran.value += \"8\";\n          break;\n        case \"nine\":\n          cadran.value += \"9\";\n          break;\n      }\n    });\n  });\n};\n\n// Click event logic\nexport const makeOperations = () => {\n  operationsButton.forEach((element: HTMLElement) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault;\n\n      if (element.id === \"equal\") {\n        operations.interuptor = false; // Out of Equal Loop\n      }\n\n      // Algebric operation buttons\n      switch (element.id) {\n        case \"square\":\n          Algebra.baseSquare(cadran);\n          break;\n        case \"cube\":\n          Algebra.baseCube(cadran);\n          break;\n        case \"factorial\":\n          Algebra.factorial(cadran);\n          break;\n        case \"cubeRoot\":\n          Algebra.baseCubeRoot(cadran);\n          break;\n        case \"squareRoot\":\n          Algebra.squareRoot(cadran);\n          break;\n        case \"percent\":\n          Algebra.percent(cadran);\n          break;\n        case \"divide\":\n          Algebra.divide(cadran);\n          break;\n        case \"multiply\":\n          Algebra.multiply(cadran);\n          break;\n        case \"minus\":\n          Algebra.minus(cadran);\n          break;\n        case \"plus\":\n          Algebra.plus(cadran);\n          break;\n      }\n    });\n  });\n};\n\n// Equal logic for (divide, multiply, addition, minus)\nexport const equalClick = () => {\n  equal.addEventListener(\"click\", (event) => {\n    event.preventDefault;\n\n    operations.interuptor = true;\n\n    if (!operations.interuptor) {\n      for (const key in operations) {\n        if (key !== \"interuptor\") {\n          operations[key] = false;\n        }\n      }\n    }\n\n    // Check if existing value\n    if (fieldValue.current.length > 0) {\n      fieldValue.second = cadran.value;\n\n      Result.operation(cadran);\n    }\n  });\n};\n","export function changeSign(cadran: HTMLInputElement): void {\n  if (cadran.value.length > 0 && !cadran.value.startsWith(\"-\")) {\n    if (parseFloat(cadran.value) >= 0) {\n      cadran.value = \"-\" + cadran.value;\n      document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n    }\n  } else if (cadran.value.length === 0) {\n    cadran.value = \"-\";\n    document.getElementById(\"cadran\").classList.add(\"text-red-500\");\n  } else {\n    let tmp: string = cadran.value.replace(\"-\", \"\");\n    cadran.value = tmp;\n    document.getElementById(\"cadran\").classList.remove(\"text-red-500\");\n    document.getElementById(\"cadran\").classList.add(\"text-blue-500\");\n  }\n}\n\nexport function point(cadran: HTMLInputElement): void {\n  if (cadran.value.includes(\".\")) {\n    return;\n  } else {\n    if (cadran.value.length === 0) {\n      cadran.value += \"0.\";\n    } else if (cadran.value.length > 0) {\n      cadran.value += \".\";\n    }\n  }\n}\n\nexport function randomValue(cadran: HTMLInputElement): void {\n  let randomNumber: number = Math.floor(Math.random() * 10);\n  cadran.value = cadran.value + randomNumber.toString();\n}\n","import { fieldValue, operations } from \"./interfaces\";\n\n// Factorial Logic\nexport function factorial(cadran: HTMLInputElement): void {\n  const baseFactorial: number = parseFloat(cadran.value);\n\n  function factorialNumber(n: number): number {\n    if (n === 0) {\n      return 1;\n    } else {\n      return n * factorialNumber(n - 1);\n    }\n  }\n\n  const result: number = factorialNumber(baseFactorial); // Appeler la fonction ici\n  const stringValue: string = result.toString();\n  cadran.value = stringValue;\n}\n\nexport function baseSquare(cadran: HTMLInputElement): void {\n  const baseSquare: number = parseFloat(cadran.value);\n  const square: number = Math.pow(baseSquare, 2);\n  cadran.value = square.toString();\n}\n\nexport function baseCube(cadran: HTMLInputElement): void {\n  const baseCube: number = parseFloat(cadran.value);\n  const cube: number = Math.pow(baseCube, 3);\n  cadran.value = cube.toString();\n}\n\nexport function baseCubeRoot(cadran: HTMLInputElement): void {\n  const baseCubeRoot: number = parseFloat(cadran.value);\n  const cubeRoot: number = Math.cbrt(baseCubeRoot);\n  cadran.value = cubeRoot.toString();\n}\n\nexport function squareRoot(cadran: HTMLInputElement): void {\n  const baseSquareRoot: number = parseFloat(cadran.value);\n  const squareRoot: number = Math.sqrt(baseSquareRoot);\n  cadran.value = squareRoot.toString();\n}\n\nexport function percent(cadran: HTMLInputElement): void {\n  const basePercent: number = parseFloat(cadran.value);\n  const percent: number = basePercent / 100;\n  cadran.value = percent.toString();\n}\n\nexport function divide(cadran: HTMLInputElement): void {\n  if (!cadran.value.length) {\n    return;\n  }\n  fieldValue.current = cadran.value;\n  cadran.value = \"\";\n  operations.divide = true;\n  for (const key in operations) {\n    if (key !== \"divide\") {\n      operations[key] = false;\n    }\n  }\n}\n\nexport function multiply(cadran: HTMLInputElement): void {\n  if (!cadran.value.length) {\n    return;\n  }\n  fieldValue.current = cadran.value;\n  cadran.value = \"\";\n  operations.multiply = true;\n  for (const key in operations) {\n    if (key !== \"multiply\") {\n      operations[key] = false;\n    }\n  }\n}\n\nexport function minus(cadran: HTMLInputElement): void {\n  if (!cadran.value.length) {\n    return;\n  }\n  fieldValue.current = cadran.value;\n  cadran.value = \"\";\n  operations.minus = true;\n  for (const key in operations) {\n    if (key !== \"minus\") {\n      operations[key] = false;\n    }\n  }\n}\n\nexport function plus(cadran: HTMLInputElement): void {\n  if (!cadran.value.length) {\n    return;\n  }\n  fieldValue.current = cadran.value;\n  cadran.value = \"\";\n  operations.plus = true;\n  for (const key in operations) {\n    if (key !== \"plus\") {\n      operations[key] = false;\n    }\n  }\n}\n","import { fieldValue, operations } from \"./interfaces\";\n\nexport function operation(cadran: HTMLInputElement): void {\n  // Divide logic\n  if (operations.divide === true) {\n    if (parseFloat(fieldValue.second) !== 0) {\n      cadran.value = (\n        parseFloat(fieldValue.current) / parseFloat(fieldValue.second)\n      ).toString();\n    } else {\n      cadran.value = \"Error\";\n    }\n\n    // Multiply logic\n  } else if (operations.multiply === true) {\n    if (parseFloat(fieldValue.second) !== 0) {\n      cadran.value = (\n        parseFloat(fieldValue.current) * parseFloat(fieldValue.second)\n      ).toString();\n    } else {\n      cadran.value = \"Error\";\n    }\n  }\n\n  // Plus logic\n  else if (operations.plus === true) {\n    if (parseFloat(fieldValue.second) !== 0) {\n      cadran.value = (\n        parseFloat(fieldValue.current) + parseFloat(fieldValue.second)\n      ).toString();\n    } else {\n      cadran.value = \"Error\";\n    }\n\n    // Minus logic\n  } else if (operations.minus === true) {\n    if (parseFloat(fieldValue.second) !== 0) {\n      cadran.value = (\n        parseFloat(fieldValue.current) - parseFloat(fieldValue.second)\n      ).toString();\n    } else {\n      cadran.value = \"Error\";\n    }\n  }\n}\n"],"names":["fieldValue","current","second","result","operations","plus","minus","divide","multiply","interuptor","cadran","document","getElementById","valuesButton","querySelectorAll","operationsButton","equal","forEach","element","addEventListener","event","preventDefault","id","value","includes","length","randomNumber","Math","floor","random","toString","startsWith","parseFloat","classList","add","tmp","replace","remove","baseSquare","square","pow","baseCube","cube","stringValue","factorialNumber","n","baseCubeRoot","cubeRoot","cbrt","baseSquareRoot","squareRoot","sqrt","percent","key"],"sourceRoot":""}